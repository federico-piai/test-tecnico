# generated by fastapi-codegen:
#   filename:  api.json
#   timestamp: 2022-12-11T11:02:10+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, conint, constr


class EnrichInputModel(BaseModel):
    key: conint(ge=1, le=6) = Field(
        ...,
        description='Id della richiesta (deve essere un numero tra 1 e 6)',
        example=2,
        title='Key',
    )
    payload: constr(min_length=10, max_length=255) = Field(
        ...,
        description='Payload della richiesta (una stringa da 10 a 255 caratteri)',
        example='Stringa di esempio',
        title='Payload',
    )


class EnrichModel(BaseModel):
    key: int = Field(..., description='Key of the record', title='Key')
    creation_datetime: datetime = Field(
        ...,
        description='Data di creazione del log aggregato',
        title='Creation Datetime',
    )
    total_response_time_ms: int = Field(
        ...,
        description='Tempo totale in millisecondi di tutte le risposte inviate nel log aggregato',
        title='Total Response Time Ms',
    )
    total_requests: int = Field(
        ...,
        description='Numero totale di tutte le risposte inviate nel log aggregato',
        title='Total Requests',
    )
    total_errors: int = Field(
        ...,
        description='Numero totale di tutte le risposte con un ',
        title='Total Errors',
    )


class Entry(BaseModel):
    key: int = Field(..., title='Key')
    payload: str = Field(..., title='Payload')
    creation_datetime: datetime = Field(..., title='Creation Datetime')
    response_time: int = Field(..., title='Response Time')
    response_code: int = Field(..., title='Response Code')


class MessageOutputModel(BaseModel):
    status_code: int = Field(
        ..., description='Status code (numeric)', example=200, title='Status Code'
    )
    message: str = Field(
        ...,
        description='Human readable message for understanding',
        example='Ingestion Complete',
        title='Message',
    )


class ResultModel(BaseModel):
    values: List[EnrichModel] = Field(..., title='Values')
    logs: List[Entry] = Field(..., title='Logs')


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')